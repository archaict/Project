#+TITLE: Config
#+PROPERTY: header-args :tangle config.el

*EMACS CONFIGURATIONS:*
This is all configurations for church of emacs.

* DOOM

** Installation

To install Doom Emacs you can use this command:

#+begin_src sh :tangle no
$ git clone --depth 1 https://github.com/hlissner/doom-emacs ~/.emacs.d
$ ~/.emacs.d/bin/doom install
#+end_src

#+RESULTS:

You might want to create an alias like this:

#+begin_src sh :tangle .alias
alias doom='~/.emacs.d/bin/doom'
#+end_src

** Restore Configurations

This is to restore Doom Emacs configurations:

#+begin_src sh :tangle install.sh
DOOM=$HOME/Project/NixOS/
ln -sf $DOOM/doom/ ~/.doom.d
#+end_src

** Scratch Mode

This is to restore Doom Emacs configurations:

#+begin_src elisp
(setq doom-scratch-initial-major-mode 'org-mode)
#+end_src

** Provide Config File

Provide this config file to be used in ~init.el~

#+begin_src elisp
(provide 'config)
#+end_src

* Repair

Some utilities to repair this doom that has been lingering since..

** Projectile

#+begin_src elisp
;; (setq projectile-mode-line "Projectile")
;; (setq projectile-track-known-projects-automatically 'nil)
#+end_src

** TODO Fast Scroll

#+begin_src elisp
;; (require 'fast-scroll)
;; (fast-scroll-config)
;; (fast-scroll-mode 1)

(setq fast-but-imprecise-scrolling 't)
(setq jit-lock-defer-time 0)
(setq display-line-numbers-type nil)
(setq doom-theme 'doom-tomorrow-night)
;;(setq doom-theme 'doom-nord-light)
(setq doom-modeline-enable-word-count nil)
#+end_src

** Garbage Collection

Sometimes it is useful to collect your garbage.

#+begin_src elisp
(after! gcmh
  (setq gcmh-high-cons-threshold 33554432))
#+end_src

* NixOS

Lifehacks for NixOS options and stuffs.

#+begin_src elisp
;;(add-to-list 'company-backends 'company-nixos-options)
#+end_src

* Bindings

This bind your +yourself+ keys to doom emacs configs.

#+begin_src elisp
(map! :leader
      :desc "Tangle current file" "c t"   #'org-babel-tangle
      :desc "Tangle current file" "t t"   #'org-babel-tangle

      :desc "Highlight"    "t h"   #'hl-todo-mode
      :desc "Time"    "t T"   #'display-time

      :desc "Dired" "o d"   #'dired-jump

      :desc "Run code" "t c c" #'org-ctrl-c-ctrl-c
      :desc "Toggle command log mode" "t c m" #'command-log-mode
      :desc "Show command log buffer" "t c l" #'clm/toggle-command-log-buffer

      :desc "Terminal buffer" "o T" #'vterm
      )

(map! :leader
      (:prefix-map ("N" . "NixOS")
        :desc "NixOS Options" "h" #'helm-nixos-options))
#+end_src

** MODE

#+begin_src elisp
(map! :leader
      (:prefix-map ("M" . "mode")

        :desc "Shell" "s" #'shell-script-mode))

#+end_src
** TEXT

#+begin_src elisp
(map! :leader
      (:prefix-map ("T" . "Text")

        :desc "Figlet Border" "f b" #'figlet-border
        :desc "Figlet Future" "f f" #'figlet-future
        :desc "Figlet Pagga"  "f p" #'figlet-pagga
        :desc "Figlet Small"  "f s" #'figlet-small
        :desc "Figlet Future Border" "f F" #'figlet-future-border

        :desc "List - Lorem Ipsum" "l" #'lorem-ipsum-insert-list
        :desc "Sentences - Lorem Ipsum" "s" #'lorem-ipsum-insert-sentences
        :desc "Paragraphs - Lorem Ipsum" "p" #'lorem-ipsum-insert-paragraphs))
#+end_src

** EVIL

#+begin_src elisp
(evil-better-visual-line-on)
(define-key evil-normal-state-map (kbd "j") 'evil-next-visual-line)
(define-key evil-normal-state-map (kbd "k") 'evil-previous-visual-line)
(define-key evil-normal-state-map (kbd "J") 'evil-scroll-down)
(define-key evil-normal-state-map (kbd "K") 'evil-scroll-up)
(map! (:after dired
       :map dired-mode-map
       :n "H" #'dired-up-directory
       :n "L" #'dired-find-file
       :n "<backspace>" #'dired-up-directory)
      )

#+end_src

* Interface

All eye-candy configurations from yours truly.

** Fonts

#+begin_src elisp
(set-window-margins nil 2)
(setq doom-font (font-spec :family "Iosevka" :size 15)
      doom-variable-pitch-font (font-spec :family "Iosevka" :size 15)
      doom-big-font (font-spec :family "Iosevka" :size 24))
(after! doom-themes
  (setq doom-themes-enable-bold t
        doom-themes-enable-italic t))
(custom-set-faces!
  '(font-lock-comment-face :slant italic)
  '(font-lock-keyword-face :slant italic))

(when (file-exists-p "~/.doom.d/banner")
  (setq +doom-dashboard-banner-padding '(2 . 2)
        +doom-dashboard-banner-file "arkiv.png"
        +doom-dashboard-banner-dir "~/.doom.d/banner"))
#+end_src

** Modeline

#+begin_src elisp
(setq doom-modeline-enable-word-count nil)
;;(set-face-attribute 'header-line nil  :height 36)
(setq-default header-line-format "   Archive-Code // 01-Ark // %M")
(setq display-time-mode 1)
#+end_src

** Centaur Tabs

#+begin_src elisp :tangle no
(setq centaur-tabs-set-bar 'over
      centaur-tabs-set-icons t
      centaur-tabs-gray-out-icons 'buffer
      centaur-tabs-height 18
      centaur-tabs-set-modified-marker t
      centaur-tabs-style "bar"
      centaur-tabs-modified-marker "•")
(map! :leader
      :desc "Toggle tabs on/off"
      "t c" #'centaur-tabs-local-mode)
(evil-define-key 'normal centaur-tabs-mode-map (kbd "g <right>") 'centaur-tabs-forward        ; default Doom binding is 'g t'
                                               (kbd "g <left>")  'centaur-tabs-backward       ; default Doom binding is 'g T'
                                               (kbd "g <down>")  'centaur-tabs-forward-group
                                               (kbd "g <up>")    'centaur-tabs-backward-group)
#+end_src

** Command Line

* Extra Packages

#+begin_src elisp :tangle packages.el
;; NIXOS
;;(package! nixos-options)
;;(package! helm-nixos-options)
;;(package! company-nixos-options)

;; WINDOW MANAGER
;;(package! exwm)

;; OTHERS
;;(package! origami)

;; REPAIR
(package! fast-scroll)

;; MODE
(package! zen-mode)
(package! command-log-mode)

;; TEXT MODE
(package! lorem-ipsum)
(package! org-bullets)
(package! figlet)

;; PRESENTATION
(package! ox-reveal)
(package! org-tree-slide)

;; EMACS
(package! doom-themes)
(package! evil-better-visual-line)

(provide 'packages)
#+end_src

** Company install

#+begin_src elisp
(setq company-idle-delay 0)
(setq company-tooltip-limit 6)
(setq company-dabbrev-downcase nil)
(setq company-minimum-prefix-length 1)
(setq company-dabbrev-ignore-case nil)
(setq company-selection-wrap-around t)
(setq company-selection-default 0)
#+end_src

** Figlet

#+begin_src elisp
(defun figlet-border (&optional b e)
  (interactive "r")
  (shell-command-on-region b e "toilet -w 200 -f term -F border" (current-buffer) t))

(defun figlet-future (&optional b e)
  (interactive "r")
  (shell-command-on-region b e "toilet -w 200 -f future" (current-buffer) t))

(defun figlet-future-border (&optional b e)
  (interactive "r")
  (shell-command-on-region b e "toilet -w 200 -f future -F border" (current-buffer) t))

(defun figlet-pagga (&optional b e)
  (interactive "r")
  (shell-command-on-region b e "toilet -w 200 -f pagga -F border" (current-buffer) t))

(defun figlet-small (&optional b e)
  (interactive "r")
  (shell-command-on-region b e "figlet -f small" (current-buffer) t))
#+end_src

** Yasnippet

Personal snippets location

#+begin_src elisp
(setq yas-snippet-dirs '("~/Project/NixOS/doom/snippets"))
#+end_src

* Mode

Configurations of every Emacs mode.

** ORG

#+begin_src elisp
(setq org-ellipsis " ")
(setq org-hide-emphasis-markers t)

;; (eval-after-load 'org '(define-key org-mode-map
;;                (kbd "+") 'trigger-org-company-complete))

(custom-set-faces
  '(org-level-1 ((t (:inherit outline-1 :height 1.2))))
  '(org-level-2 ((t (:inherit outline-2 :height 1.1))))
  '(org-level-3 ((t (:inherit outline-3 :height 1.0))))
  '(org-level-4 ((t (:inherit outline-4 :height 1.0))))
  '(org-level-5 ((t (:inherit outline-5 :height 1.0)))))

(lambda () (progn
  (setq left-margin-width 2)
  (setq right-margin-width 2)
  (set-window-buffer nil (current-buffer))))
#+end_src

*** Prettify

#+begin_src elisp
;; Hook in HOOKS FOREVER
(prettify-symbols-mode t)
(global-prettify-symbols-mode t)
(global-hl-todo-mode t)
#+end_src

*** Bullets

#+begin_src elisp
(setq org-bullets-bullet-list '("⛬"))
#+end_src

*** Company

#+begin_src elisp
;; Company mode
(defun trigger-org-company-complete ()
  (interactive)
  (if (string-equal "#" (string (preceding-char)))
    (progn
      (insert "+")
      (company-complete))
    (insert "+")))

(defun trigger-org-company-complete () (interactive)
  (if (string-equa(setq org-hide-emphasis-markers t))))
#+end_src

*** Reveal

#+begin_src elisp :tangle no
;;(setq org-reveal-root "https://cdn.jsdelivr.net/npm/reveal.js")
#+end_src

** HIGHLIGHT

#+begin_src elisp
(setq hl-todo-keyword-faces
      '(("HOLD"   . "#D3869B")
        ("TITLE"  . "#FABD2F")
        ("TODO"   . "#FABD2F")
        ("LINK"   . "#5E81AC")
        ("NOTE"   . "#B8BB26")
        ("DONE"   . "#808080")
        ("HACK"   . "#FE8019")
        ("FIXME"  . "#FB4934")))
#+end_src

* Functions

#+begin_src emacs-lisp
(defun arc/make-tangled-files-executable ()
  (set-file-modes (buffer-file-name) #o755))
(add-hook 'org-babel-post-tangle-hook 'arc/make-tangled-files-executable)
#+end_src

#+begin_src elisp :tangle no
(defun arc-syntax-color-hex ()
  (interactive)
  (font-lock-add-keywords
   nil
   '(("#[[:xdigit:]]\\{3\\}"
      (0 (put-text-property
          (match-beginning 0)
          (match-end 0)
          'face (list :background
                      (let* (
                             (ms (match-string-no-properties 0))
                             (r (substring ms 1 2))
                             (g (substring ms 2 3))
                             (b (substring ms 3 4)))
                        (concat "#" r r g g b b))))))
     ("#[[:xdigit:]]\\{6\\}"
      (0 (put-text-property
          (match-beginning 0)
          (match-end 0)
          'face (list :background (match-string-no-properties 0)))))))
  (font-lock-flush))
#+end_src

* Hooks

Add-Hook to your emacs

** INIT Hooks

#+begin_src elisp
(add-hook 'after-init-hook 'global-company-mode)
(add-hook 'after-init-hook 'display-time-mode)
(add-hook 'after-init-hook(lambda ()(setq indent-tabs-mode nil)))
(add-hook 'after-init-hook(lambda ()(setq tab-width 2)))
(add-hook 'after-init-hook(lambda ()(setq evil-shift-width 2)))
#+end_src

** ORG Hooks

#+begin_src elisp
(add-hook 'org-mode-hook (lambda () (hl-todo-mode 1)))
(add-hook 'org-mode-hook (lambda () (org-bullets-mode 1)))
(add-hook 'org-mode-hook ;; Prettify Symbols
          (lambda ()
            (push '("#+begin_src" . "λ") prettify-symbols-alist)
            (push '("#+end_src" . "λ") prettify-symbols-alist)))
(add-hook 'org-mode-hook
          '(lambda ()
             (add-hook 'write-contents-functions
                       'delete-trailing-whitespace)))
#+end_src

** OTHER Hooks

#+begin_src elisp
(add-hook 'fast-scroll-start-hook (lambda () (flycheck-mode -1)))
(add-hook 'fast-scroll-end-hook (lambda () (flycheck-mode 1)))
(add-hook 'after-save-hook 'executable-make-buffer-file-executable-if-script-p)
;;(add-hook 'css-mode-hook 'arc-syntax-color-hex)
;;(add-hook 'php-mode-hook 'arc-syntax-color-hex)
;;(add-hook 'html-mode-hook 'arc-syntax-color-hex)
#+end_src

* Globals

International variables on emacs.

#+begin_src elisp
(global-hl-todo-mode 1)
(global-hi-lock-mode 1)
#+end_src

* Defaults

#+begin_src elisp
(setq figlet-default-font "Future")
#+end_src
